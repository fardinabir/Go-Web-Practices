// Code generated by MockGen. DO NOT EDIT.
// Source: testingmocking (interfaces: Cal)

// Package mock_testingmocking is a generated GoMock package.
package mock_testingmocking

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockCal is a mock of Cal interface.
type MockCal struct {
	ctrl     *gomock.Controller
	recorder *MockCalMockRecorder
}

// MockCalMockRecorder is the mock recorder for MockCal.
type MockCalMockRecorder struct {
	mock *MockCal
}

// NewMockCal creates a new mock instance.
func NewMockCal(ctrl *gomock.Controller) *MockCal {
	mock := &MockCal{ctrl: ctrl}
	mock.recorder = &MockCalMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCal) EXPECT() *MockCalMockRecorder {
	return m.recorder
}

// Add mocks base method.
func (m *MockCal) Add() int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Add")
	ret0, _ := ret[0].(int)
	return ret0
}

// Add indicates an expected call of Add.
func (mr *MockCalMockRecorder) Add() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Add", reflect.TypeOf((*MockCal)(nil).Add))
}

// Sub mocks base method.
func (m *MockCal) Sub(arg0 int) int {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Sub", arg0)
	ret0, _ := ret[0].(int)
	return ret0
}

// Sub indicates an expected call of Sub.
func (mr *MockCalMockRecorder) Sub(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Sub", reflect.TypeOf((*MockCal)(nil).Sub), arg0)
}
